# app/routes/dashboard.py

from flask import Blueprint, render_template
from flask_login import login_required, current_user
from app.models.transaction import Transaction
from app.models.fraud_alert import FraudAlert
from app.models.station import Station
from app.models.user import User
from app import db

dashboard_bp = Blueprint('dashboard', __name__, url_prefix='/dashboard')

@dashboard_bp.route('/')
@login_required
def index():
    total_users = User.query.count()
    total_stations = Station.query.count()
    total_txns = Transaction.query.count()
    flagged_txns = Transaction.query.filter_by(is_flagged=True).count()
    fraud_alerts = FraudAlert.query.order_by(FraudAlert.timestamp.desc()).limit(10).all()

    return render_template('dashboard.html', 
        total_users=total_users,
        total_stations=total_stations,
        total_txns=total_txns,
        flagged_txns=flagged_txns,
        fraud_alerts=fraud_alerts
    )


import csv
from flask import Response

@dashboard_bp.route('/export/fraud_report')
@login_required
def export_fraud_report():
    alerts = FraudAlert.query.order_by(FraudAlert.timestamp.desc()).all()

    def generate():
        data = [["Transaction ID", "Reason", "Severity", "Timestamp"]]
        for alert in alerts:
            data.append([
                alert.transaction_id,
                alert.reason,
                alert.severity,
                alert.timestamp.strftime("%Y-%m-%d %H:%M")
            ])
        yield from (",".join(row) + "\n" for row in data)

    return Response(generate(), mimetype="text/csv", headers={
        "Content-Disposition": "attachment; filename=fraud_report.csv"
    })

from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from flask import send_file
import io

@dashboard_bp.route('/export/fraud_report_pdf')
@login_required
def export_fraud_report_pdf():
    if current_user.role != 'admin':
        flash("Only admins can export PDF reports.", "danger")
        return redirect(url_for('dashboard.index'))

    alerts = FraudAlert.query.order_by(FraudAlert.timestamp.desc()).all()

    buffer = io.BytesIO()
    pdf = canvas.Canvas(buffer, pagesize=A4)
    width, height = A4

    # Title
    pdf.setFont("Helvetica-Bold", 16)
    pdf.drawString(50, height - 50, "AI Fraud Report")
    pdf.setFont("Helvetica", 10)
    pdf.drawString(50, height - 70, f"Generated by: {current_user.username}")
    
    # Table headers
    pdf.setFont("Helvetica-Bold", 10)
    y = height - 100
    pdf.drawString(50, y, "Txn ID")
    pdf.drawString(100, y, "Reason")
    pdf.drawString(300, y, "Severity")
    pdf.drawString(400, y, "Timestamp")
    
    # Table rows
    pdf.setFont("Helvetica", 9)
    y -= 15
    for alert in alerts:
        if y < 50:  # New page
            pdf.showPage()
            y = height - 50

        pdf.drawString(50, y, str(alert.transaction_id))
        pdf.drawString(100, y, alert.reason[:40])  # truncate if too long
        pdf.drawString(300, y, alert.severity)
        pdf.drawString(400, y, alert.timestamp.strftime('%Y-%m-%d %H:%M'))
        y -= 15

    pdf.save()
    buffer.seek(0)

    return send_file(
        buffer,
        as_attachment=True,
        download_name="fraud_report.pdf",
        mimetype='application/pdf'
    )
